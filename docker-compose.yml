version: '3.7'

services:
  traefik:
    image: traefik:v1.7-alpine
    command:
      - "--logLevel=DEBUG"
      - "--api"
      - "--metrics"
      - "--metrics.prometheus.buckets=0.1,0.3,1.2,5.0"
      # - "--entrypoints=Name:http Address::80 Redirect.EntryPoint:https"
      # - "--entrypoints=Name:https Address::443 TLS"
 #     - "--defaultentrypoints=http,https"
      - "--docker"
      - "--docker.swarmMode"
      - "--docker.domain=docker.localhost"
      - "--docker.watch"
    networks:
      - traefik
      - inbound
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - target: 80
        published: 80
        mode: host
      - target: 443
        published: 443
        mode: host
      - target: 8080
        published: 8080
        protocol: tcp
        mode: ingress
    deploy:
      mode: global
      placement:
        constraints:
          - node.role == manager
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - inbound
      # - prometheus
    restart: always
    deploy:
      labels:
       - "traefik.frontend.rule=Host:prometheus.localhost"
       - "traefik.port=9090"
       - "traefik.docker.network=inbound"
      placement:
        constraints:
        - node.role==manager
  grafana:
    image: grafana/grafana
    depends_on:
      - prometheus
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./grafana/config.monitoring
    networks:
      - inbound
    user: "104"
    restart: always
    deploy:
     labels:
      - "traefik.port=3000"
      - "traefik.docker.network=inbound"
      -  "traefik.frontend.rule=Host:grafana.localhost"
     placement:
        constraints:
          - node.role == manager

networks:
  traefik:
    driver: overlay
    name: traefik
  inbound:
    driver: overlay
    name: inbound
  prometheus:
    driver: overlay
    name: prometheus

volumes:
    prometheus_data: {}
    grafana_data: {}